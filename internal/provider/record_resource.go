package provider

import (
	"context"
	"fmt"
	"net"
	"regexp"
	"slices"
	"strconv"
	"strings"
	"terraform-provider-autodns/internal/api"

	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64default"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Ensure provider defined types fully satisfy framework interfaces.
var (
	_ resource.Resource                   = &RecordResource{}
	_ resource.ResourceWithConfigure      = &RecordResource{}
	_ resource.ResourceWithImportState    = &RecordResource{}
	_ resource.ResourceWithValidateConfig = &RecordResource{}
)

func NewRecordResource() resource.Resource {
	return &RecordResource{}
}

// RecordResource defines the resource implementation.
type RecordResource struct {
	client *api.Client
}

// RecordResourceModel describes the resource data model.
type RecordResourceModel struct {
	ID     types.String `tfsdk:"id"`
	ZoneID types.String `tfsdk:"zone_id"`
	Name   types.String `tfsdk:"name"`
	TTL    types.Int64  `tfsdk:"ttl"`
	Type   types.String `tfsdk:"type"`
	Values types.List   `tfsdk:"values"`
}

func (r *RecordResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_record"
}

func (r *RecordResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Manage DNS records for an AutoDNS zone.",

		Attributes: map[string]schema.Attribute{
			"id": schema.StringAttribute{
				Computed: true,
				MarkdownDescription: "Record ID. This is generated by the terraform provider due to the lack of IDs in the API response." +
					"The format of the ID generated by the provider is 'zoneID__recordName__recordType'",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"zone_id": schema.StringAttribute{
				Required:            true,
				MarkdownDescription: "AutoDNS zone ID. Must be provided in the format zoneOrigin@zoneVirtualNameServer.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"name": schema.StringAttribute{
				MarkdownDescription: "Name of the DNS record.",
				Required:            true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"ttl": schema.Int64Attribute{
				MarkdownDescription: "Record TTL",
				Optional:            true,
				Computed:            true,
				Default:             int64default.StaticInt64(60),
			},
			"type": schema.StringAttribute{
				MarkdownDescription: "Record Type",
				Required:            true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"values": schema.ListAttribute{
				ElementType:         types.StringType,
				MarkdownDescription: "Record Value",
				Required:            true,
			},
		},
	}
}

func (r *RecordResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*api.Client)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *api.Client, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *RecordResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var plan RecordResourceModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Generate an internal ID for the resource.
	plan.ID = types.StringValue(plan.ZoneID.ValueString() + "__" + plan.Name.ValueString() + "__" + plan.Type.ValueString())

	// Fetch all records
	records, err := r.client.GetRecords(ctx, plan.ZoneID.ValueString())
	if err != nil {
		resp.Diagnostics.AddError("Client error", "Could not fetch the zone dns records: "+err.Error())
		return
	}

	// Filter out records irrelevant to this resource
	records = slices.DeleteFunc(records, func(r api.Record) bool {
		return r.Name != plan.Name.ValueString() || r.Type != plan.Type.ValueString()
	})

	// We check if one of the record values already exists
	if len(records) != 0 {
		resp.Diagnostics.AddError(
			"Unexpected response",
			fmt.Sprintf("The resource already partially exists, please import it first. ID: %s", plan.ID.ValueString()),
		)
		return
	}

	records, diags := expandRecord(ctx, plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Create the resource.
	err = r.client.CreateRecords(ctx, plan.ZoneID.ValueString(), records)
	if err != nil {
		resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to create record, got error:\n %s", err))
		return
	}

	// Write logs using the tflog package
	tflog.Trace(ctx, "created a resource")

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &plan)...)
}

func (r *RecordResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var state RecordResourceModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Get a refreshed list of the records in the zone
	records, err := r.client.GetRecords(ctx, state.ZoneID.ValueString())
	if err != nil {
		resp.Diagnostics.AddError("Client error", fmt.Sprintf("Could not fetch the zone dns records:\n %s", err.Error()))
		return
	}

	records = slices.DeleteFunc(records, func(r api.Record) bool {
		return r.Name != state.Name.ValueString() || r.Type != state.Type.ValueString()
	})

	if len(records) == 0 {
		resp.Diagnostics.AddError("Unexpected response", fmt.Sprintf("Could not find a record with the id: %s", state.ID.ValueString()))
		return
	}

	record, diags := flattenRecord(ctx, records)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	state.Name = record.Name
	state.Type = record.Type
	state.TTL = record.TTL
	state.Values = record.Values

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

func (r *RecordResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var state, plan RecordResourceModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Get old records from the state
	oldRecords, diags := expandRecord(ctx, state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Get the new records from the plan
	newRecords, diags := expandRecord(ctx, plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	// API request to update the records
	err := r.client.UpdateRecords(ctx, plan.ZoneID.ValueString(), oldRecords, newRecords)
	if err != nil {
		resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to update record, got error:\n %s", err))
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &plan)...)
}

func (r *RecordResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var state RecordResourceModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Get the records from the state
	records, diags := expandRecord(ctx, state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	// API call to delete the records
	err := r.client.DeleteRecords(ctx, state.ZoneID.ValueString(), records)
	if err != nil {
		resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to delete record, got error: %s", err))
		return
	}
}

func (r *RecordResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	idParts := strings.Split(req.ID, "__")

	if len(idParts) != 3 || idParts[0] == "" || idParts[2] == "" {
		resp.Diagnostics.AddError(
			"Unexpected Import Identifier",
			fmt.Sprintf("Expected import identifier with format: ZONEID__NAME__TYPE. Got: %q", req.ID),
		)
		return
	}

	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("id"), req.ID)...)
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("zone_id"), idParts[0])...)
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("name"), idParts[1])...)
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("type"), idParts[2])...)
}

func (r *RecordResource) ValidateConfig(ctx context.Context, req resource.ValidateConfigRequest, resp *resource.ValidateConfigResponse) {
	var config RecordResourceModel

	// Read the resource config
	resp.Diagnostics.Append(req.Config.Get(ctx, &config)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Turn the values into a slice of []types.String
	recordValues := make([]types.String, 0, len(config.Values.Elements()))
	resp.Diagnostics.Append(config.Values.ElementsAs(ctx, &recordValues, false)...)
	if resp.Diagnostics.HasError() {
		return
	}

	recordType := config.Type.ValueString()

	// Validate types that can have only one value
	singleValueTypes := []string{"ALIAS", "CNAME"}
	if len(recordValues) > 1 && slices.Contains(singleValueTypes, recordType) {
		resp.Diagnostics.AddAttributeError(
			path.Root("values"),
			"Wrong Attribute Configuration",
			"You can't set multiple values for records of type ALIAS, CNAME.",
		)

		return
	}

	// IP types
	IPTypes := []string{"A", "AAAA"}
	if slices.Contains(IPTypes, recordType) {
		// Simple values checks
		for _, v := range recordValues {
			value := v.ValueString()
			ip := net.ParseIP(value)

			// Check if it's an IP address
			if ip == nil {
				resp.Diagnostics.AddAttributeError(
					path.Root("values"),
					"Wrong Attribute Configuration",
					fmt.Sprintf("Value is not an IP address: %s", value),
				)
			}

			// Check if it's an IPv4 address when the record type is A
			if recordType == "A" && ip.To4() == nil {
				resp.Diagnostics.AddAttributeError(
					path.Root("values"),
					"Wrong Attribute Configuration",
					fmt.Sprintf("Value is not an IPv4 address: %s", value),
				)
			}

			// Check if it's an IPv6 address when the record type is AAAA
			if recordType == "AAAA" && ip.To4() != nil {
				resp.Diagnostics.AddAttributeError(
					path.Root("values"),
					"Wrong Attribute Configuration",
					fmt.Sprintf("Value is not an IPv4 address: %s", value),
				)
			}
		}
	}

	// Validate records format when a pref field exists
	if hasPrefField(config.Type.ValueString()) {
		prefValidator := regexp.MustCompile("[0-9]+[[:blank:]].*")

		for _, v := range recordValues {
			value := v.ValueString()

			if !prefValidator.MatchString(value) {
				resp.Diagnostics.AddAttributeError(
					path.Root("values"),
					"Wrong Attribute Format",
					"MX, SRV, NAPTR format is: [pref] [value]",
				)
			}
		}
	}

	if resp.Diagnostics.HasError() {
		return
	}
}

func hasPrefField(s string) bool {
	return slices.Contains([]string{"MX", "SRV", "NAPTR"}, s)
}

func expandRecord(ctx context.Context, resource RecordResourceModel) ([]api.Record, diag.Diagnostics) {
	values := make([]types.String, 0, len(resource.Values.Elements()))
	diags := resource.Values.ElementsAs(ctx, &values, false)

	records := []api.Record{}
	for _, v := range values {
		record := api.Record{
			Name:  resource.Name.ValueString(),
			Type:  resource.Type.ValueString(),
			TTL:   resource.TTL.ValueInt64(),
			Value: v.ValueString(),
		}

		if hasPrefField(record.Type) {
			valueParts := strings.Fields(record.Value)
			pref, err := strconv.Atoi(valueParts[0])

			if err != nil {
				diags.AddError("Client error", fmt.Sprintf("Unable to update record, got error:\n %s", err))
			}

			record.Value = valueParts[1]
			record.Pref = int32(pref)
		}

		records = append(records, record)
	}

	return records, diags
}

func flattenRecord(ctx context.Context, records []api.Record) (RecordResourceModel, diag.Diagnostics) {
	state := RecordResourceModel{}

	values := []string{}
	for _, record := range records {
		v := record.Value

		if hasPrefField(record.Type) {
			v = strconv.Itoa(int(record.Pref)) + " " + v
		}
		values = append(values, v)
	}

	tfValues, diags := types.ListValueFrom(ctx, types.StringType, values)

	state.Name = types.StringValue(records[0].Name)
	state.Type = types.StringValue(records[0].Type)
	state.TTL = types.Int64Value(records[0].TTL)
	state.Values = tfValues

	return state, diags
}
