package provider

import (
	"context"
	"fmt"
	"terraform-provider-autodns/internal/api"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// Ensure provider defined types fully satisfy framework interfaces.
var (
	_ datasource.DataSource              = &ZoneDataSource{}
	_ datasource.DataSourceWithConfigure = &ZoneDataSource{}
)

func NewZoneDataSource() datasource.DataSource {
	return &ZoneDataSource{}
}

// ZoneDataSource defines the data source implementation.
type ZoneDataSource struct {
	client *api.Client
}

// ZoneDataSourceModel describes the data source data model.
type ZoneDataSourceModel struct {
	ID                types.String `tfsdk:"id"`
	Origin            types.String `tfsdk:"origin"`
	NameServerGroup   types.String `tfsdk:"name_server_group"`
	VirtualNameServer types.String `tfsdk:"virtual_name_server"`
}

func (d *ZoneDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_zone"
}

func (d *ZoneDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Fetch zone information from the AutoDNS API.",

		Attributes: map[string]schema.Attribute{
			"id": schema.StringAttribute{
				MarkdownDescription: "Zone ID. This is generated by the terraform provider due to the lack of IDs in the API response." +
					"The format of the ID generated by the provider is 'zoneOrigin@zoneVirtualNameServer' and it can be safely used as an input for 'zone_id' " +
					"when it's required by the other provider resources.",
				Computed: true,
			},
			"origin": schema.StringAttribute{
				MarkdownDescription: "Zone's domain name.",
				Required:            true,
			},
			"name_server_group": schema.StringAttribute{
				MarkdownDescription: "The nameserver group attached to the zone.",
				Computed:            true,
			},
			"virtual_name_server": schema.StringAttribute{
				MarkdownDescription: "The zone's virtual name server.",
				Computed:            true,
			},
		},
	}
}

func (d *ZoneDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*api.Client)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Data Source Configure Type",
			fmt.Sprintf("Expected *api.Client, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	d.client = client
}

func (d *ZoneDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var config ZoneDataSourceModel

	// Read Terraform configuration data into the model
	resp.Diagnostics.Append(req.Config.Get(ctx, &config)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// API Call
	zone, err := d.client.GetZone(ctx, config.Origin.ValueString())
	if err != nil {
		resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to read zone, got error: %s", err))
		return
	}

	// Map response body to model
	config.ID = types.StringValue(zone.Origin + "@" + zone.VirtualNameServer)
	config.Origin = types.StringValue(zone.Origin)
	config.NameServerGroup = types.StringValue(zone.NameServerGroup)
	config.VirtualNameServer = types.StringValue(zone.VirtualNameServer)

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &config)...)
}
